//
//  RatchetTests.swift
//  SignalProtocolSwiftTests
//
//  Created by User on 04.11.17.
//  Copyright Â© 2017 User. All rights reserved.
//

import XCTest
@testable import LibSignalProtocolSwift

class RatchetTests: XCTestCase {

    func testChainKeyDerivationV3() {

        let messageKey = Data([
            0xbf, 0x51, 0xe9, 0xd7, 0x5e, 0x0e, 0x31, 0x03,
            0x10, 0x51, 0xf8, 0x2a, 0x24, 0x91, 0xff, 0xc0,
            0x84, 0xfa, 0x29, 0x8b, 0x77, 0x93, 0xbd, 0x9d,
            0xb6, 0x20, 0x05, 0x6f, 0xeb, 0xf4, 0x52, 0x17])

        let macKey = Data([
            0xc6, 0xc7, 0x7d, 0x6a, 0x73, 0xa3, 0x54, 0x33,
            0x7a, 0x56, 0x43, 0x5e, 0x34, 0x60, 0x7d, 0xfe,
            0x48, 0xe3, 0xac, 0xe1, 0x4e, 0x77, 0x31, 0x4d,
            0xc6, 0xab, 0xc1, 0x72, 0xe7, 0xa7, 0x03, 0x0b])

        let nextChainKey = Data([
            0x28, 0xe8, 0xf8, 0xfe, 0xe5, 0x4b, 0x80, 0x1e,
            0xef, 0x7c, 0x5c, 0xfb, 0x2f, 0x17, 0xf3, 0x2c,
            0x7b, 0x33, 0x44, 0x85, 0xbb, 0xb7, 0x0f, 0xac,
            0x6e, 0xc1, 0x03, 0x42, 0xa2, 0x46, 0xd1, 0x5d])

        let seed = Data([
            0x8a, 0xb7, 0x2d, 0x6f, 0x4c, 0xc5, 0xac, 0x0d,
            0x38, 0x7e, 0xaf, 0x46, 0x33, 0x78, 0xdd, 0xb2,
            0x8e, 0xdd, 0x07, 0x38, 0x5b, 0x1c, 0xb0, 0x12,
            0x50, 0xc7, 0x15, 0x98, 0x2e, 0x7a, 0xd4, 0x8f])


        let chainKey = RatchetChainKey(key: seed, index: 0)
        guard chainKey.key == seed else {
            XCTFail("Invalid chain key")
            return
        }

        guard let messageKeys = try? chainKey.messageKeys() else {
            XCTFail("Could not get message keys")
            return
        }
        guard messageKeys.cipherKey == messageKey else {
            XCTFail("Invalid cipher key")
            return
        }
        guard messageKeys.macKey == macKey else {
            XCTFail("Invalid mac key")
            return
        }
        guard messageKeys.counter == 0 else {
            XCTFail("Invalid counter")
            return
        }

        guard let nextChain = try? chainKey.next() else {
            XCTFail("Could not get next chain key")
            return
        }
        guard nextChain.key == nextChainKey else {
            XCTFail("Invalid next chain key")
            return
        }
        guard chainKey.index == 0, nextChain.index == 1 else {
            XCTFail("Invalid index")
            return
        }

        guard let nextMessageKeys = try? nextChain.messageKeys() else {
            XCTFail("Could not get next message keys")
            return
        }
        guard nextMessageKeys.counter == 1 else {
            XCTFail("Invalid index")
            return
        }
    }

    func testIdentityKeySerialize() {
        guard let keyPair = try? KeyPair() else {
            XCTFail("Could not create keys")
            return
        }
        guard let record = try? keyPair.protoData() else {
            XCTFail("Could not serialize key pair")
            return
        }

        guard let newKeyPair = try? KeyPair(from: record) else {
            XCTFail("Could not create new key")
            return
        }
        guard keyPair == newKeyPair else {
            XCTFail("Keys not equal")
            return
        }
    }

    private func createKeyPair(publicKey: Data, privateKey: Data) -> KeyPair? {
        guard let pub = try? PublicKey(point: publicKey),
            let priv = try? PrivateKey(unverifiedPoint: privateKey) else {
                return nil
        }
        return KeyPair(publicKey: pub, privateKey: priv)
    }

    func testRatchetingSessionAsBob() {

        let bobPrivate = Data([
            0xa1, 0xca, 0xb4, 0x8f, 0x7c, 0x89, 0x3f, 0xaf,
            0xa9, 0x88, 0x0a, 0x28, 0xc3, 0xb4, 0x99, 0x9d,
            0x28, 0xd6, 0x32, 0x95, 0x62, 0xd2, 0x7a, 0x4e,
            0xa4, 0xe2, 0x2e, 0x9f, 0xf1, 0xbd, 0xd6, 0x5a])

        let bobIdentityPrivate = Data([
            0x48, 0x75, 0xcc, 0x69, 0xdd, 0xf8, 0xea, 0x07,
            0x19, 0xec, 0x94, 0x7d, 0x61, 0x08, 0x11, 0x35,
            0x86, 0x8d, 0x5f, 0xd8, 0x01, 0xf0, 0x2c, 0x02,
            0x25, 0xe5, 0x16, 0xdf, 0x21, 0x56, 0x60, 0x5e])

        let bobSignedPrivate = Data([
            0x58, 0x39, 0x00, 0x13, 0x1f, 0xb7, 0x27, 0x99,
            0x8b, 0x78, 0x03, 0xfe, 0x6a, 0xc2, 0x2c, 0xc5,
            0x91, 0xf3, 0x42, 0xe4, 0xe4, 0x2a, 0x8c, 0x8d,
            0x5d, 0x78, 0x19, 0x42, 0x09, 0xb8, 0xd2, 0x53])

        let senderChain = Data([
            0x97, 0x97, 0xca, 0xca, 0x53, 0xc9, 0x89, 0xbb,
            0xe2, 0x29, 0xa4, 0x0c, 0xa7, 0x72, 0x70, 0x10,
            0xeb, 0x26, 0x04, 0xfc, 0x14, 0x94, 0x5d, 0x77,
            0x95, 0x8a, 0x0a, 0xed, 0xa0, 0x88, 0xb4, 0x4d])

        guard let bobIdentityKeyPair = createKeyPair(publicKey: bobIdentityPublic, privateKey: bobIdentityPrivate),
            let bobBaseKeyPair = createKeyPair(publicKey: bobPublic, privateKey: bobPrivate),
            let bobSignedPreKeyPair = createKeyPair(publicKey: bobSignedPublic, privateKey: bobSignedPrivate) else {
                XCTFail("Could not create keys")
                return
        }

        guard let aliceBaseKeyPublic = try? PublicKey(point: aliceBasePublic),
            let aliceIdentityKeyPublic = try? PublicKey(point: aliceIdentityPublic) else {
            XCTFail("Could not create keys")
            return
        }

        let session = SessionState()
        do {
            try session.bobInitialize(
                ourIdentityKey: bobIdentityKeyPair,
                ourSignedPreKey: bobSignedPreKeyPair,
                ourOneTimePreKey: nil,
                ourRatchetKey: bobBaseKeyPair,
                theirIdentityKey: aliceIdentityKeyPublic,
                theirBaseKey: aliceBaseKeyPublic)
        } catch {
            XCTFail("Could not initialize bob")
            return
        }
        guard bobIdentityKeyPair.publicKey == session.localIdentity else {
            XCTFail("Session state local identity invalid")
            return
        }
        guard aliceIdentityKeyPublic == session.remoteIdentity else {
            XCTFail("Session state remote identity invalid")
            return
        }
        guard let key = session.senderChain?.chainKey.key, senderChain == key else {
            XCTFail("Session state sender chain key invalid")
            return
        }
    }

    func testRatchetingSessionAsAlice() {

        let aliceBasePrivate = Data([
            0x11, 0xae, 0x7c, 0x64, 0xd1, 0xe6, 0x1c, 0xd5,
            0x96, 0xb7, 0x6a, 0x0d, 0xb5, 0x01, 0x26, 0x73,
            0x39, 0x1c, 0xae, 0x66, 0xed, 0xbf, 0xcf, 0x07,
            0x3b, 0x4d, 0xa8, 0x05, 0x16, 0xa4, 0x74, 0x49])

        let aliceIdentityPrivate = Data([
            0x90, 0x40, 0xf0, 0xd4, 0xe0, 0x9c, 0xf3, 0x8f,
            0x6d, 0xc7, 0xc1, 0x37, 0x79, 0xc9, 0x08, 0xc0,
            0x15, 0xa1, 0xda, 0x4f, 0xa7, 0x87, 0x37, 0xa0,
            0x80, 0xeb, 0x0a, 0x6f, 0x4f, 0x5f, 0x8f, 0x58])

        let receiverChain = Data([
            0x97, 0x97, 0xca, 0xca, 0x53, 0xc9, 0x89, 0xbb,
            0xe2, 0x29, 0xa4, 0x0c, 0xa7, 0x72, 0x70, 0x10,
            0xeb, 0x26, 0x04, 0xfc, 0x14, 0x94, 0x5d, 0x77,
            0x95, 0x8a, 0x0a, 0xed, 0xa0, 0x88, 0xb4, 0x4d])

        guard let aliceBaseKey = createKeyPair(publicKey: aliceBasePublic, privateKey: aliceBasePrivate),
            let aliceIdentityKeyPair = createKeyPair(publicKey: aliceIdentityPublic, privateKey: aliceIdentityPrivate) else {
                XCTFail("Could not create keys")
                return
        }

        guard let bobPublicIdentityKey = try? PublicKey(point: bobIdentityPublic),
            let bobEphemeralKeyPublic = try? PublicKey(point: bobPublic),
            let bobSignedPreKey = try? PublicKey(point: bobSignedPublic) else {
                XCTFail("Could not create keys")
                return
        }
        let session = SessionState()

        do {
            try session.aliceInitialize(
                ourIdentityKey: aliceIdentityKeyPair,
                ourBaseKey: aliceBaseKey,
                theirIdentityKey: bobPublicIdentityKey,
                theirSignedPreKey: bobSignedPreKey,
                theirOneTimePreKey: nil,
                theirRatchetKey: bobEphemeralKeyPublic)
        } catch {
            XCTFail("Could not initialize session as Alice")
        }
        guard aliceIdentityKeyPair.publicKey == session.localIdentity else {
            XCTFail("Invalid local identity in session")
            return
        }
        guard bobPublicIdentityKey == session.remoteIdentity else {
            XCTFail("Invalid remote identity in session")
            return
        }
        guard let key = session.receiverChain(for: bobEphemeralKeyPublic)?.chainKey.key, receiverChain == key else {
            XCTFail("Invalid receiver chain key")
            return
        }
    }

    private let aliceBasePublic = Data([
        0x47, 0x2d, 0x1f, 0xb1, 0xa9, 0x86, 0x2c, 0x3a,
        0xf6, 0xbe, 0xac, 0xa8, 0x92, 0x02, 0x77, 0xe2,
        0xb2, 0x6f, 0x4a, 0x79, 0x21, 0x3e, 0xc7, 0xc9,
        0x06, 0xae, 0xb3, 0x5e, 0x03, 0xcf, 0x89, 0x50])

    private let bobPublic = Data([
        0x2c, 0xb4, 0x97, 0x76, 0xb8, 0x77, 0x02, 0x05,
        0x74, 0x5a, 0x3a, 0x6e, 0x24, 0xf5, 0x79, 0xcd,
        0xb4, 0xba, 0x7a, 0x89, 0x04, 0x10, 0x05, 0x92,
        0x8e, 0xbb, 0xad, 0xc9, 0xc0, 0x5a, 0xd4, 0x58])

    private let bobIdentityPublic = Data([
        0xf1, 0xf4, 0x38, 0x74, 0xf6, 0x96, 0x69, 0x56,
        0xc2, 0xdd, 0x47, 0x3f, 0x8f, 0xa1, 0x5a, 0xde,
        0xb7, 0x1d, 0x1c, 0xb9, 0x91, 0xb2, 0x34, 0x16,
        0x92, 0x32, 0x4c, 0xef, 0xb1, 0xc5, 0xe6, 0x26])

    private let aliceEphemeralPublic = Data([
        0x6c, 0x3e, 0x0d, 0x1f, 0x52, 0x02, 0x83, 0xef,
        0xcc, 0x55, 0xfc, 0xa5, 0xe6, 0x70, 0x75, 0xb9,
        0x04, 0x00, 0x7f, 0x18, 0x81, 0xd1, 0x51, 0xaf,
        0x76, 0xdf, 0x18, 0xc5, 0x1d, 0x29, 0xd3, 0x4b])

    private let aliceIdentityPublic = Data([
        0xb4, 0xa8, 0x45, 0x56, 0x60, 0xad, 0xa6, 0x5b,
        0x40, 0x10, 0x07, 0xf6, 0x15, 0xe6, 0x54, 0x04,
        0x17, 0x46, 0x43, 0x2e, 0x33, 0x39, 0xc6, 0x87,
        0x51, 0x49, 0xbc, 0xee, 0xfc, 0xb4, 0x2b, 0x4a])

    private let bobSignedPublic = Data([
        0xac, 0x24, 0x8a, 0x8f, 0x26, 0x3b, 0xe6, 0x86,
        0x35, 0x76, 0xeb, 0x03, 0x62, 0xe2, 0x8c, 0x82,
        0x8f, 0x01, 0x07, 0xa3, 0x37, 0x9d, 0x34, 0xba,
        0xb1, 0x58, 0x6b, 0xf8, 0xc7, 0x70, 0xcd, 0x67])
}


