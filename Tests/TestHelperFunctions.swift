//
//  TestHelperFunctions.swift
//  SignalProtocolSwiftTests
//
//  Created by User on 08.11.17.
//  Copyright Â© 2017 User. All rights reserved.
//

import Foundation
@testable import LibSignalProtocolSwift

private let alicePublic = Data([
    0x1b, 0xb7, 0x59, 0x66, 0xf2, 0xe9, 0x3a, 0x36, 0x91, 0xdf, 0xff,
    0x94, 0x2b, 0xb2, 0xa4, 0x66, 0xa1, 0xc0, 0x8b, 0x8d, 0x78, 0xca,
    0x3f, 0x4d, 0x6d, 0xf8, 0xb8, 0xbf, 0xa2, 0xe4, 0xee, 0x28])

private let alicePrivate = Data([
    0xc8, 0x06, 0x43, 0x9d, 0xc9, 0xd2, 0xc4, 0x76, 0xff, 0xed, 0x8f,
    0x25, 0x80, 0xc0, 0x88, 0x8d, 0x58, 0xab, 0x40, 0x6b, 0xf7, 0xae,
    0x36, 0x98, 0x87, 0x90, 0x21, 0xb9, 0x6b, 0xb4, 0xbf, 0x59])

private let bobPublic = Data([
    0x65, 0x36, 0x14, 0x99, 0x3d, 0x2b, 0x15, 0xee, 0x9e, 0x5f, 0xd3,
    0xd8, 0x6c, 0xe7, 0x19, 0xef, 0x4e, 0xc1, 0xda, 0xae, 0x18, 0x86,
    0xa8, 0x7b, 0x3f, 0x5f, 0xa9, 0x56, 0x5a, 0x27, 0xa2, 0x2f])

private let bobPrivate = Data([
    0xb0, 0x3b, 0x34, 0xc3, 0x3a, 0x1c, 0x44, 0xf2, 0x25, 0xb6, 0x62,
    0xd2, 0xbf, 0x48, 0x59, 0xb8, 0x13, 0x54, 0x11, 0xfa, 0x7b, 0x03,
    0x86, 0xd4, 0x5f, 0xb7, 0x5d, 0xc5, 0xb9, 0x1b, 0x44, 0x66])

let aliceAddress = SignalAddress(identifier: "+14159999999", deviceId: 1)

let bobAddress = SignalAddress(identifier: "+14158888888", deviceId: 1)

/**
 Create the key pairs for bob and alice for testing.
 */
func createBobAndAlice() throws -> (alice: KeyPair, bob: KeyPair) {
    let alice = KeyPair(publicKey: try PublicKey(point: alicePublic),
                        privateKey: try PrivateKey(point: alicePrivate))
    let bob = KeyPair(publicKey: try PublicKey(point: bobPublic),
                      privateKey:  try PrivateKey(point: bobPrivate))
    return (alice, bob)
}

/**
 Randomize an array of elements
 */
func shuffle<T>(_ buffer: inout [T]) {
    guard buffer.count > 1 else {
        return
    }
    for i in 0..<buffer.count-1 {
        let index = Int(arc4random_uniform(UInt32(buffer.count-i)))
        let a = buffer[i]
        buffer[i] = buffer[index]
        buffer[index] = a
    }
}

func hexEncodedString(_ data: Data) -> String {
    return data.map { String(format: "0x%02hhx, ", $0) }.joined()
}
